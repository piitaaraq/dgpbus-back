# Generated by Django 5.1 on 2025-09-24 10:04

from django.db import migrations

def forwards(apps, schema_editor):
    Patient = apps.get_model('dgp_bus', 'Patient')
    Appointment = apps.get_model('dgp_bus', 'Appointment')

    # Detect whether inline appointment fields still exist on Patient at this migration state
    field_names = {f.name for f in Patient._meta.get_fields()}
    needed = {'appointment_date', 'appointment_time', 'hospital', 'accommodation'}
    if not needed.issubset(field_names):
        print("[dgp_bus] Skipping data migration: Patient no longer has inline appointment fields.")
        return

    created_count = 0
    # No select_related here (fields might be gone in some states)
    for p in Patient.objects.all():
        appt_date = getattr(p, 'appointment_date', None)
        appt_time = getattr(p, 'appointment_time', None)
        hosp_id   = getattr(p, 'hospital_id', None)
        acc_id    = getattr(p, 'accommodation_id', None)

        if not (appt_date and appt_time and hosp_id):
            continue

        appt, created = Appointment.objects.get_or_create(
            patient_id=p.id,
            hospital_id=hosp_id,
            accommodation_id=acc_id,
            appointment_date=appt_date,
            appointment_time=appt_time,
            defaults={
                'bus_time_computed': getattr(p, 'bus_time', None),
                'status':            getattr(p, 'status', False),
                'translator':        getattr(p, 'translator', False),
                'has_taxi':          getattr(p, 'has_taxi', False),
                'wheelchair':        getattr(p, 'wheelchair', False),
                'trolley':           getattr(p, 'trolley', False),
                'companion':         getattr(p, 'companion', False),
                'department':        getattr(p, 'department', ''),
                'description':       getattr(p, 'description', ''),
                'departure_location':getattr(p, 'departure_location', None),
            }
        )
        if created:
            created_count += 1

    print(f"[dgp_bus] Migrated {created_count} appointment(s) from Patient -> Appointment")

def backwards(apps, schema_editor):
    Patient = apps.get_model('dgp_bus', 'Patient')
    Appointment = apps.get_model('dgp_bus', 'Appointment')

    field_names = {f.name for f in Patient._meta.get_fields()}
    # Only attempt reverse if those fields still exist (they likely won't)
    needed = {'appointment_date', 'appointment_time', 'hospital', 'accommodation'}
    if not needed.issubset(field_names):
        print("[dgp_bus] Skipping reverse data migration: inline appointment fields not present on Patient.")
        return

    deleted = 0
    for p in Patient.objects.all():
        appt_date = getattr(p, 'appointment_date', None)
        appt_time = getattr(p, 'appointment_time', None)
        hosp_id   = getattr(p, 'hospital_id', None)
        acc_id    = getattr(p, 'accommodation_id', None)

        if not (appt_date and appt_time and hosp_id):
            continue

        deleted += Appointment.objects.filter(
            patient_id=p.id,
            hospital_id=hosp_id,
            accommodation_id=acc_id,
            appointment_date=appt_date,
            appointment_time=appt_time,
        ).delete()[0]

    print(f"[dgp_bus] Reversed migration: deleted {deleted} matching appointment(s)")

class Migration(migrations.Migration):

    dependencies = [
        # Keep this as-is; 0007 already ran and removed the fields
        ('dgp_bus', '0007_appointment_remove_patient_accommodation_and_more'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ]
